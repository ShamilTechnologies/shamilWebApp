/// File: lib/features/auth/data/BookableService.dart
/// Represents a service or class that can be booked by time slots.
library;

import 'package:equatable/equatable.dart';

class BookableService extends Equatable {
  final String id; // Unique identifier for the service
  final String name;
  final String description;
  final int durationMinutes; // Duration of the service/slot in minutes
  final double price; // Price per booking/slot
  final int
  capacity; // Max number of people per slot (1 for individual appointments)
  // Add other relevant fields: required resources, associated staff, buffer time etc.

  const BookableService({
    required this.id,
    required this.name,
    required this.description,
    required this.durationMinutes,
    required this.price,
    required this.capacity,
  });

  /// Creates a BookableService instance from a map (e.g., Firestore data).
  factory BookableService.fromMap(Map<String, dynamic> map) {
    return BookableService(
      // Generate ID if missing, or ensure Firestore generates one upon add
      id: map['id'] ?? DateTime.now().millisecondsSinceEpoch.toString(),
      name: map['name'] as String? ?? '',
      description: map['description'] as String? ?? '',
      durationMinutes:
          (map['durationMinutes'] as num?)?.toInt() ?? 60, // Default 60 mins
      price: (map['price'] as num?)?.toDouble() ?? 0.0, // Default 0.0
      capacity: (map['capacity'] as num?)?.toInt() ?? 1, // Default capacity 1
    );
  }

  /// Converts the BookableService instance to a map for storage.
  Map<String, dynamic> toMap() {
    return {
      'id': id, // Consider if ID should be auto-generated by Firestore instead
      'name': name,
      'description': description,
      'durationMinutes': durationMinutes,
      'price': price,
      'capacity': capacity,
    };
  }

  /// Creates a copy of the instance with optional updated fields.
  BookableService copyWith({
    String? id,
    String? name,
    String? description,
    int? durationMinutes,
    double? price,
    int? capacity,
  }) {
    return BookableService(
      id: id ?? this.id,
      name: name ?? this.name,
      description: description ?? this.description,
      durationMinutes: durationMinutes ?? this.durationMinutes,
      price: price ?? this.price,
      capacity: capacity ?? this.capacity,
    );
  }

  @override
  List<Object?> get props => [
    id,
    name,
    description,
    durationMinutes,
    price,
    capacity,
  ];
}
